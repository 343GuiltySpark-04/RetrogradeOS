/*
	mem.c
	-----
	Memory management for Cottontail
	By: Frank Millea, Oct. 24-Dec. 5, 2000.
	Last updated: July 27, 2001.
*/

#include "mem.h"
#include "../m3/scheduler.h"
#include "../m3/process.h"
#include "../m3/thread.h"
#include "../io/bus/bus.h"

void mem_init()
{
	u_long i;

	if(int15_e801[0] == 0 && int15_e801[1] == 0)	// use CX/DX
	{
		int15_e801[0] = int15_e801[2];
		int15_e801[1] = int15_e801[3];
	}
	pmem_size = 0x100000 + (int15_e801[0] * 1024);
	if(int15_e801[1] > 0)
	{
		pmem_size = 0x1000000 + (int15_e801[1] * 65536);
	}
	if(pmem_size == 0x100000)	// if BIOS detection failed, probe
	{
		pmem_size = memprobe();	// probe memory
	}
	kprintf("mem_init(): kernel size is %d bytes, checksum is %xh (%dd)\n", kernel_size, kchecksum, kchecksum);
	kprintf("mem_init(): BIOS or memprobe() reporting %dKB physical memory (%dMB).\n", pmem_size >> 10, pmem_size >> 20);
	kprintf("mem_init(): BIOS reporting base memory at %dKB...", *base_pmem_size);
	*base_pmem_size = ((*base_pmem_size << 10) & 0xFFFFF000) >> 10;
	kprintf("OK, rounding down to %dKB.\n", *base_pmem_size);

	// build the stack of free memory pages
	free_pmem_stack_size = pmem_size / 1024;
	if(free_pmem_stack_size & 0xFFF)
	{
		free_pmem_stack_size += 4096;
		free_pmem_stack_size &= 0xFFFFF000;
	}
	stack_init(&free_pmem, (void *)0x100000, free_pmem_stack_size);
	i = kernel_stack;
	while((*base_pmem_size << 10) - i)	// if there is unused kernel (low) memory, grab that first
	{
		add_free_pmem_page(i);
		i += 0x1000;
	}
	for(i=0x1000; i<0x10000; i+=4096)	// add the 60KB used by the bootloader to the free memory pool
	{
		if(i == 0x1000)
		{
			floppy_dma_page = (void *)i;	// get a page for floppy DMA (needs to be in the lower 16MB)
		}
		else
		{
			add_free_pmem_page(i);
		}
	}
	for(i=0x100000 + free_pmem_stack_size; i<pmem_size; i+=4096)	// add all the high memory (that isn't consumed by the free physical memory linked list)
	{
		add_free_pmem_page(i);
	}
//	printf("creating KAS...");
//	for(;;);
	create_kas();	// create the kernel address space
//	printf("KAS created!");
//	for(;;);
}

u_long memprobe()
{
	#define MEMPROBE_MAGIC 0x5A5AA5A5
//	#define MEMPROBE_MAGIC 0x12345678
	/*
	-----------------------------------------------------------------------------------
	Probes memory at 4KB intervals and returns system memory size.
	-----------------------------------------------------------------------------------
	*/
	u_long *m = (u_long *)0;
	u_long i = 0x40000, j, temp;

	temp = m[i];	// save copy of what we will be modifying
	m[i] = MEMPROBE_MAGIC;
	while(m[i] == MEMPROBE_MAGIC && (i << 2) < PADDR_LIMIT + 1)
	{
		m[i] = temp;	// restore value in memory
		i += 0x400;	// go to the next page
		temp = m[i];	// save copy of what we will be modifying
		m[i] = MEMPROBE_MAGIC;
		for(j=0; j<100; j++){};	// short delay loop (some systems will lock or report incorrect sizes if we don't delay here)
	}
	return i << 2;
}

u_long get_free_pmem_page()
{
	u_long eflags, n;

	asm("pushl %eax");
	asm("pushfl");
	asm("popl %eax");
	asm("movl %%eax, %w0" : "=m" (eflags) :);
	asm("popl %eax");
	asm("cli");
	n = pop(&free_pmem);
	if(eflags & 0x200)
	{
		asm("sti");
	}
	return n << 12;
}

void add_free_pmem_page(u_long x)
{
	u_long eflags;

	asm("pushl %eax");
	asm("pushfl");
	asm("popl %eax");
	asm("movl %%eax, %w0" : "=m" (eflags) :);
	asm("popl %eax");
	asm("cli");
	push(&free_pmem, x >> 12);
	if(eflags & 0x200)
	{
		asm("sti");
	}
}

void create_kas()
{
	/*
	----------------------------------------------------------------------------------------
	Description:
	Creates the kernel address space.
	----------------------------------------------------------------------------------------
	*/
	int i, j;
	u_long *kas_pgdir = (void *)get_free_pmem_page(), *kas_pgtab1 = (void *)get_free_pmem_page(), *kas_pgtab2 = (void *)get_free_pmem_page(), *kas_pgtab3 = (void *)get_free_pmem_page();
	u_long *page;

	_memsetd(kas_pgdir, 0, 1024);	// initialize the page directory
	_memsetd(kas_pgtab1, 0, 1024);	// initialize the 1st page table
	_memsetd(kas_pgtab2, 0, 1024);	// initialize the 2nd page table
	_memsetd(kas_pgtab3, 0, 1024);	// initialize the 3rd page table
	kas_pgdir[0] = (u_long)kas_pgtab1 | 0x03;	// map the first page table at 0MB-4MB
	kas_pgdir[1] = (u_long)kas_pgtab2 | 0x03;	// map the second page table at 4MB-8MB
	kas_pgdir[2] = (u_long)kas_pgdir | 0x03;	// map the page directory back on itself to map the page tables at 8MB-12MB
	kas_pgdir[3] = (u_long)kas_pgtab3 | 0x03;	// map the third page table at 12MB-16MB
	for(i=0; i<0x100000 + free_pmem_stack_size; i+=4096)	// identity map up to the end of the free physical memory linked list
	{
		if(i < 0x400000)
		{
			kas_pgtab1[i >> 12] = i | 0x03;	// write the page table entry
		}
		else
		{
			kas_pgtab2[(i >> 12) & 0x3FF] = i | 0x03;	// write the page table entry
		}
	}
	kas_pgtab2[(PGDIR_BASE >> 12) & 0x3FF] = (u_long)kas_pgdir | 0x03;	// map the page directory at 5MB
	for(i=0; i<sizeof(mm_t); i+=4096)	// set up the memory allocation bitmap
	{
		page = (void *)get_free_pmem_page();	// allocate 4KB of RAM
		_memsetd(page, 0, 1024);	// initialize the page to all 0's
		kas_pgtab2[((MM_BASE >> 12) + (i >> 12)) & 0x3FF] = (u_long)page | 0x03;	// map the page
	}
/*	if(mp_capable)	// if multiprocessor capability is detected and enabled, map the local APIC
	{
		// map local APIC at 0xFEE00000 linear
		pgtabx_page = kas_get_dword((void *)(pgdir_page + ((LOCAL_APIC_BASE & 0xFFC00000) >> 22)));	// read page directory entry
		if(pgtabx_page == 0)	// if page table needs to be created
		{
			pgtabx_page = get_free_page();	// create the page table
			kas_set_dword((void *)(pgdir_page + ((LOCAL_APIC_BASE & 0xFFC00000) >> 22)), pgtabx_page | 0x07);	// write the page directory entry
			kas_memset((void *)pgtabx_page, 0, 4096);	// initialize the new page table
		}
		if(mp_float->mp_config_p != 0)	// if MP configuration table is present
		{
			pgtab_ent = mp_config->local_apic_addr;
		}
		else	// use the default
		{
			pgtab_ent = LOCAL_APIC_BASE;
		}
		pgtab_ent |= 0x1B;	// tack on the flags; OS-only, page cache disabled, page write through
		kas_set_dword((void *)(pgtabx_page + (((LOCAL_APIC_BASE >> 12) & 0x3FF) << 2)), pgtab_ent);	// map the local APIC into the SAS
	}*/
	kas_cr3 = (u_long)kas_pgdir;
}

void *malloc(u_long n)
{
	/*
	-----------------------------------------------------------------------------------
	Description:
	Allocates memory in the current virtual address space. 
	Returns a pointer to the newly-allocated memory, -1 on error.
	-----------------------------------------------------------------------------------
	*/
	u_short data_sel;
	int a, b, c, i, j, k, l, t, f_start, f_size;
	u_long pgdir_ent, pgtab_ent;

	asm("pushl %eax");
	asm("movw %ds, %ax");
	asm("movw %%ax, %w0" : "=m" (data_sel));
	asm("popl %eax");

	if(n & 0xFFF)	// if n is not 4KB-aligned, align it
	{
		n &= 0xFFFFF000;
		n += 4096;
	}
	n >>= 12;	// get n in pages
	if(n == 0)
	{
		return (void *)-1;
	}

	// lock address space here

	f_size = 0;	// reset count of contiguous free pages
	for(i=0; i<32; i++)	// search through all 1024 4MB superpages in groups of 32
	{
		if(mm_p->superpage_bitmap[i] != 0xFFFFFFFF)	// if there are free pages in some of the superpages
		{
			a = i << 5;
			for(j=0; j<32; j++)	// find which superpages have free pages
			{
				if(mm_p->superpage_count[a + j] >= ((n - f_size) & 0x3FF))	// if superpage possibly has enough free pages... this will result in a slight *bug*: if a superpage doesn't have enough space, whatever it has at the end should be checked to see if it is contiguous with the next superpage, but this small rare occurrence is hereby sacrificed for performance :-)
				{
					b = (a + j) << 5;
					for(k=0; k<32; k++)	// search through all 1024 pages in groups of 32
					{
						t = mm_p->page_bitmap[b + k];
						if(t == 0x00000000)	// if the 32 pages are all free (32 x 4KB = 128KB)
						{
							if(f_size == 0)	f_start = (b + k) << 5;	// save the start address
							f_size += 32;
						}
						else if(t == 0xFFFFFFFF)	// if the 32 pages are all used
						{
							f_size = 0;
						}
						else	// some are used, some are free; figure out which
						{
							c = (b + k) << 5;
							for(l=0; l<32; l++)
							{
								if(!(t & (1 << l)))	// if page is free
								{
									if(f_size == 0)	f_start = c + l;
									f_size++;
								}
								else
								{
									f_size = 0;
								}
							}
						}
						if(f_size >= n)	// if enough pages have been found
						{
							break;
						}
					}
					if(f_size >= n)
					{
						break;
					}
				}
			}
			if(f_size >= n)
			{
				break;
			}
		}
	}
	if(f_size < n)	// if not enough address space is available
	{
		return (void *)-1;
	}

	// write down the allocation markers for demand-mode allocation
	for(i=f_start; i<f_start+n; i++)
	{
		if(!(i & 0x3FF))	// if we need to go to the next page table
		{
			pgdir_ent = pgdir[i >> 10];	// read page directory entry
			if(pgdir_ent == 0)	// if we need to create the page table
			{
				pgdir_ent = get_free_pmem_page();	// allocate a page of physical memory
				pgdir[i >> 10] = pgdir_ent | 0x03;	// write the page directory entry to create the new page table
//				invlpg((u_long)&pgtab[i]);
				_memsetd((void *)&pgtab[i], 0, 1024);	// initialize the new page table
				pgdir[i >> 10] |= 0x04;	// allow applications to access it now (the TLB flush at the end will take care of this)
			}
		}
		pgtab[i] = NP_ALLOC_MAPPED | (data_sel == kdata_sel ? 0 : 0x08) | (i == f_start ? 0 : 0x04);
		mm_p->page_bitmap[i >> 5] |= 1 << (i & 0x1F);	// mark the page as allocated by setting its bit in the bitmap
		mm_p->superpage_count[i >> 10]--;	// subtract one from the superpage's number of free pages
		if(mm_p->superpage_count[i >> 10] == 0)		// if the result is 0, set the superpage's bit in the bitmap
		{
			mm_p->superpage_bitmap[(i >> 10) >> 5] |= 1 << ((i >> 10) & 0x1F);
		}
//		invlpg(i << 12);
	}

	// unlock the address space

	return (void *)(f_start << 12);
}

u_long dalloc(void *mem_block)
{
	/*
	-----------------------------------------------------------------------------------
	Description:
	Deallocates the block of memory specified by mem_block. Returns error code on error
	and 0 on success.
	-----------------------------------------------------------------------------------
	*/
	u_long i = (u_long)mem_block >> 12, pgdir_ent, pgtab_ent;

	// lock the address space here

	pgtab_ent = pgtab[i];	// read the page table entry pertaining to the first page in the memory block
	if((pgtab_ent & 0xFFFFFFF7) == 0x3FFFFFF4 || ((pgtab_ent & 0x01) && (pgtab_ent & 0x200)))	// if first page is in middle of a block
	{
		printf("dalloc error!; pgtab_ent = %x", pgtab_ent);
//		process_p->cr3_mutex = 0;
		return -1;
	}

	do
	{
		pgtab[i] = 0;
		invlpg(i << 12);
		if(pgtab_ent & 0x01)	// if the page is present in memory
		{
			add_free_pmem_page(pgtab_ent);	// reclaim the page
		}
		else	// if it's on disk or mapped
		{
			// ...
		}
		mm_p->page_bitmap[i >> 5] &= ~(1 << (i & 0x1F));	// clear the page's bit; it is now free
		mm_p->superpage_bitmap[(i >> 10) >> 5] &= ~(1 << (i & 0x1F));	// clear the superpage's bit; at least one page within it is now free
		mm_p->superpage_count[i >> 10]++;	// increment number of free pages in that superpage
		i++;	// go to next page
		if(pgdir[i >> 10] == 0)	// if page directory entry is 0, we're done
		{
			break;
		}
		pgtab_ent = pgtab[i];	// get next page table entry
	} while((pgtab_ent & 0xFFFFFFF7) == 0x3FFFFFF4 || ((pgtab_ent & 0x01) && (pgtab_ent & 0x200)));	// keep looping as long as it's a middle block

	// unlock the address space

	return 0;
}

inline void invlpg(u_long m)
{
	/*
	----------------------------------------------------------------------------------------
	Description:
	Flushes the processor's translation lookaside buffer of the specified memory address
	(contained within a page).
	----------------------------------------------------------------------------------------
	*/
	asm("pushl %eax");
	asm("movl %w0, %%eax" : : "m" (m));
	asm("invlpg (%eax)");
	asm("popl %eax");
}